import { Injectable, OnModuleInit } from '@nestjs/common';
import amqp, { ConsumeMessage, Channel } from 'amqplib';
import { db } from '../db';
import { vehicles } from '../db/schema';

// –°–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ RabbitMQ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserCreatedEvent {
  type: 'USER_CREATED';
  data: {
    id: number;
    email: string;
  };
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RabbitMQ
const RABBIT_URL = process.env.RABBIT_URL || 'amqp://guest:guest@rabbitmq:5672';
const EXCHANGE_NAME = process.env.RABBITMQ_EXCHANGE || 'user.events';
const QUEUE_NAME = process.env.RABBIT_QUEUE || 'vehicle.user.created';
const ROUTING_KEY = 'user.created';

let channel: Channel; // –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
async function getChannel(): Promise<Channel> {
  if (!channel) {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
    const conn = await amqp.connect(RABBIT_URL);

    // –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª
    channel = await conn.createChannel();

    // –°–æ–∑–¥–∞—ë–º exchange —Ç–∏–ø–∞ topic
    await channel.assertExchange(EXCHANGE_NAME, 'topic', { durable: true });

    // –°–æ–∑–¥–∞—ë–º –æ—á–µ—Ä–µ–¥—å (durable = true, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Ç–µ—Ä—è–ª–∏—Å—å)
    await channel.assertQueue(QUEUE_NAME, { durable: true });

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫ exchange —Å –∫–ª—é—á–æ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    await channel.bindQueue(QUEUE_NAME, EXCHANGE_NAME, ROUTING_KEY);
  }
  return channel;
}

// –°–µ—Ä–≤–∏—Å-–∫–æ–Ω—Å—å—é–º–µ—Ä –¥–ª—è NestJS
@Injectable()
export class RabbitConsumerService implements OnModuleInit {
  // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –º–æ–¥—É–ª—è
  async onModuleInit() {
    await this.startConsumer();
  }

  // –ó–∞–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—á–µ—Ä–µ–¥—å
  private async startConsumer(): Promise<void> {
    const ch = await getChannel();

    console.log('‚úÖ Vehicle Service is listening for user.created events...');

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—á–µ—Ä–µ–¥—å
    await ch.consume(
      QUEUE_NAME,
      (msg: ConsumeMessage | null) => {
        if (!msg) return;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        void this.handleMessage(msg); // –∏—Å–ø–æ–ª—å–∑—É–µ–º void, —á—Ç–æ–±—ã ESLint –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ "–ø–ª–∞–≤–∞—é—â–∏–π –ø—Ä–æ–º–∏—Å"
      },
      { noAck: false }, // —Å–æ–æ–±—â–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  private async handleMessage(msg: ConsumeMessage) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç
    const content = msg.content.toString();
    const event = JSON.parse(content) as UserCreatedEvent;

    // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (event?.type === 'USER_CREATED' && event.data?.id) {
      const userId = event.data.id;

      // –°–æ–∑–¥–∞—ë–º "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ" —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const [vehicle] = await db
        .insert(vehicles)
        .values({
          make: 'Unknown',
          model: 'Unknown',
          year: null,
          userId,
        })
        .returning();

      console.log(
        `üöó Vehicle created for user ${userId} (vehicle id: ${vehicle.id})`,
      );
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    channel.ack(msg);
  }
}

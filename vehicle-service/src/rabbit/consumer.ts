import amqp, { Channel, ConsumeMessage } from 'amqplib';
import { db } from '../db';
import { vehicles } from '../db/schema';

// –¢–∏–ø —Å–æ–±—ã—Ç–∏—è UserCreated
interface UserCreatedEvent {
  type: 'USER_CREATED';
  data: { id: number; email: string };
}

// –¢–∏–ø–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
function isRecord(value: unknown): value is Record<string, unknown> {
  return typeof value === 'object' && value !== null;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–±—ã—Ç–∏—é USER_CREATED
function isUserCreatedEvent(value: unknown): value is UserCreatedEvent {
  if (!isRecord(value)) return false;
  if (value.type !== 'USER_CREATED') return false;
  const data = value.data;
  if (!isRecord(data)) return false;
  return typeof data.id === 'number' && typeof data.email === 'string';
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RabbitMQ
const RABBIT_URL = process.env.RABBIT_URL || 'amqp://guest:guest@rabbitmq:5672';
// Exchange, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
const EXCHANGE_NAME = process.env.RABBITMQ_EXCHANGE || 'user.events';
// –°–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–ª—É—à–∞–µ–º
const ROUTING_KEY = 'user.created';
// –û—á–µ—Ä–µ–¥—å –∫–æ–Ω—Å—å—é–º–µ—Ä–∞
const QUEUE_NAME = process.env.RABBIT_QUEUE || 'vehicle.user.created';

let channel: Channel | null = null;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (—Å–æ–∑–¥–∞—ë—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
async function getChannel(): Promise<Channel> {
  if (!channel) {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ
    const conn = await amqp.connect(RABBIT_URL);
    channel = await conn.createChannel();

    // –°–æ–∑–¥–∞—ë–º durable exchange (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç)
    await channel.assertExchange(EXCHANGE_NAME, 'topic', { durable: true });

    // –°–æ–∑–¥–∞—ë–º –æ—á–µ—Ä–µ–¥—å –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ—ë –∫ exchange
    await channel.assertQueue(QUEUE_NAME, { durable: true });
    await channel.bindQueue(QUEUE_NAME, EXCHANGE_NAME, ROUTING_KEY);

    console.log(
      `‚úÖ –û—á–µ—Ä–µ–¥—å "${QUEUE_NAME}" –≥–æ—Ç–æ–≤–∞ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ exchange "${EXCHANGE_NAME}" —Å routingKey "${ROUTING_KEY}"`,
    );
  }
  return channel;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞
export async function startConsumer() {
  // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
  const ch = await getChannel();

  console.log('‚úÖ –°–µ—Ä–≤–∏—Å Vehicle —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è user.created...');

  await ch.consume(
    QUEUE_NAME,
    (msg: ConsumeMessage | null) => {
      if (!msg) return;

      console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${msg.content.toString()}`);

      void (async () => {
        try {
          const parsed: unknown = JSON.parse(msg.content.toString());

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
          if (!isUserCreatedEvent(parsed)) {
            console.warn('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:', parsed);
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ–±—ã RabbitMQ –Ω–µ –ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å
            ch.ack(msg);
            return;
          }

          const userId = parsed.data.id;

          // –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
          const [vehicle] = await db
            .insert(vehicles)
            .values({ make: 'Unknown', model: 'Unknown', year: null, userId })
            .returning();

          console.log(
            `üöó Vehicle —Å–æ–∑–¥–∞–Ω –¥–ª—è user ${userId} (vehicle id: ${vehicle.id})`,
          );

          // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
          ch.ack(msg);
          console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (ack)');
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
          try {
            // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–∫–ª–æ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ)
            ch.nack(msg, false, false);
            console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (nack)');
          } catch (e) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å nack:', e);
          }
        }
      })();
    },
    // –†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    { noAck: false },
  );
}

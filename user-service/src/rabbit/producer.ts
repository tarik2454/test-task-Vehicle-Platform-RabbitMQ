import amqp, { Channel } from 'amqplib';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RabbitMQ
const RABBIT_URL = process.env.RABBIT_URL || 'amqp://rabbitmq:5672';
const EXCHANGE_NAME = process.env.RABBITMQ_EXCHANGE || 'user.events';
const QUEUE_NAME = 'user.events';
const ROUTING_KEY = 'user.created';

let channel: Channel; // –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
async function getChannel(): Promise<Channel> {
  if (!channel) {
    const conn = await amqp.connect(RABBIT_URL); // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
    channel = await conn.createChannel(); // —Å–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª

    // –°–æ–∑–¥–∞—ë–º exchange —Ç–∏–ø–∞ topic
    await channel.assertExchange(EXCHANGE_NAME, 'topic', { durable: true });

    // –°–æ–∑–¥–∞—ë–º –æ—á–µ—Ä–µ–¥—å (durable = true, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Ç–µ—Ä—è–ª–∏—Å—å)
    await channel.assertQueue(QUEUE_NAME, { durable: true });

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫ exchange —Å routing key
    await channel.bindQueue(QUEUE_NAME, EXCHANGE_NAME, ROUTING_KEY);
  }
  return channel;
}

// –§—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è USER_CREATED
export async function publishUserCreated(eventData: {
  id: number;
  email: string;
}) {
  const ch = await getChannel(); // –ø–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª

  // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ exchange —Å –∫–ª—é—á–æ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
  ch.publish(
    EXCHANGE_NAME,
    ROUTING_KEY,
    Buffer.from(JSON.stringify({ type: 'USER_CREATED', data: eventData })),
    { persistent: true, contentType: 'application/json' }, // –¥–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–æ–π–∫–∏–º
  );

  console.log('üì§ Sent USER_CREATED event:', eventData); // –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
}

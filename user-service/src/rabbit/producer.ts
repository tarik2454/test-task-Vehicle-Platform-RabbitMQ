import amqp, { Channel } from 'amqplib';

// URL RabbitMQ
const RABBIT_URL = process.env.RABBIT_URL || 'amqp://guest:guest@rabbitmq:5672';
// –ù–∞–∑–≤–∞–Ω–∏–µ exchange –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const EXCHANGE_NAME = process.env.RABBITMQ_EXCHANGE || 'user.events';
// Routing key –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
const ROUTING_KEY = 'user.created';
// –ù–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
// const QUEUE_NAME = 'user.created.queue';

let channel: Channel;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (—Å–æ–∑–¥–∞—ë—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π)
async function getChannel(): Promise<Channel> {
  if (!channel) {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ
    const conn = await amqp.connect(RABBIT_URL);
    channel = await conn.createChannel();

    // –°–æ–∑–¥–∞—ë–º durable exchange
    await channel.assertExchange(EXCHANGE_NAME, 'topic', { durable: true });
  }
  return channel;
}

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è USER_CREATED
export async function publishUserCreated(eventData: {
  id: number;
  email: string;
}) {
  // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª (—Å–æ–∑–¥–∞—ë—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
  const ch = await getChannel();

  const message = {
    type: 'USER_CREATED',
    data: eventData,
  };

  // –õ–æ–≥ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
  console.log(
    `üîπ –ö–∞–Ω–∞–ª –≥–æ—Ç–æ–≤. –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ USER_CREATED –≤ exchange "${EXCHANGE_NAME}" —Å routingKey "${ROUTING_KEY}"`,
  );

  // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ exchange (–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –æ—á–µ—Ä–µ–¥—å)
  ch.publish(EXCHANGE_NAME, ROUTING_KEY, Buffer.from(JSON.stringify(message)), {
    // –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ RabbitMQ
    persistent: true,
    contentType: 'application/json',
  });

  // –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  console.log('üì§ –°–æ–±—ã—Ç–∏–µ USER_CREATED –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', eventData);
}
